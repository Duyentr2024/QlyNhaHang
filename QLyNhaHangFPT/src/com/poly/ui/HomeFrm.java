/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.poly.ui;

import com.poly.DAO.BanAnDAO;
import com.poly.DAO.ChiTietDacBanDAO;
import com.poly.DAO.ChiTietHoaDonDAO;
import com.poly.DAO.HoaDonDAO;
import com.poly.DAO.KhachHangDAO;
import com.poly.DAO.KhuVucDAO;
import com.poly.entity.BanAn;
import com.poly.entity.ChiTietDacBan;
import com.poly.entity.ChiTietHoaDon;
import com.poly.entity.HoaDon;
import com.poly.entity.KhachHang;
import com.poly.entity.KhuVuc;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author votha
 */
public class HomeFrm extends javax.swing.JFrame {

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        ChiTietBanAn = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblThongTinBA = new javax.swing.JTable();
        lblMaBanAn = new javax.swing.JLabel();
        lblTongTien = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtThongTin = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCTDB = new javax.swing.JTable();
        btnHuyDB = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHoTenKHDB = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSoDienThoaiDB = new javax.swing.JTextField();
        txtNgayDB = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTienCoc = new javax.swing.JTextField();
        txtTenBanAnDB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtMoTaBD = new javax.swing.JTextArea();
        btnDacBan = new javax.swing.JButton();
        jpnKhuVuc = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAllBanAn = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel7.setBackground(new java.awt.Color(255, 153, 102));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton3.setText("Chuyển bàn");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Gọi món");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Thêm Bàn");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("Làm mới");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ChiTietBanAn.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Chi tiết đặt bàn"));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Thông tin bàn ăn", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        tblThongTinBA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblThongTinBA);

        lblMaBanAn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMaBanAn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMaBanAn.setText("Mã bàn ăn:");

        lblTongTien.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTongTien.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTongTien.setText("Tổng tiền:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblMaBanAn, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)
                        .addComponent(lblTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMaBanAn)
                    .addComponent(lblTongTien))
                .addGap(18, 18, 18))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Thông tin đặc bàn", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        txtThongTin.setColumns(20);
        txtThongTin.setRows(5);
        txtThongTin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtThongTinMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(txtThongTin);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Thông tin ĐB", jPanel5);

        tblCTDB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tblCTDB);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tất cả", jPanel8);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        btnHuyDB.setText("Hủy thông tin đặc bàn");
        btnHuyDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyDBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChiTietBanAnLayout = new javax.swing.GroupLayout(ChiTietBanAn);
        ChiTietBanAn.setLayout(ChiTietBanAnLayout);
        ChiTietBanAnLayout.setHorizontalGroup(
            ChiTietBanAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChiTietBanAnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ChiTietBanAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnHuyDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ChiTietBanAnLayout.setVerticalGroup(
            ChiTietBanAnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChiTietBanAnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnHuyDB, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Đặc Bàn", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N
        jPanel9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Họ tên khách hàng:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Số điện thoại:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Ngày đặt:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Tiền cọc");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Tên bàn:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Mô tả");

        txtMoTaBD.setColumns(20);
        txtMoTaBD.setRows(5);
        jScrollPane8.setViewportView(txtMoTaBD);

        btnDacBan.setText("Đặt bàn");
        btnDacBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDacBanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtHoTenKHDB)
                    .addComponent(txtSoDienThoaiDB, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                .addGap(94, 94, 94)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(46, 46, 46)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNgayDB)
                    .addComponent(txtTienCoc, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                .addGap(65, 65, 65)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                    .addComponent(txtTenBanAnDB))
                .addGap(53, 53, 53)
                .addComponent(btnDacBan, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHoTenKHDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgayDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtTenBanAnDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtSoDienThoaiDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtTienCoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnDacBan, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpnKhuVuc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );

        jpnKhuVuc.addTab("tab1", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );

        jpnKhuVuc.addTab("tab2", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );

        jpnKhuVuc.addTab("tab3", jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        tblAllBanAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblAllBanAn);

        jPanel4.add(jScrollPane2);

        jpnKhuVuc.addTab("Tất cả", jPanel4);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpnKhuVuc, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChiTietBanAn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jpnKhuVuc, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ChiTietBanAn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel6);

        jMenu1.setText("Trang chủ");

        jMenuItem1.setText("jMenuItem1");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Quản lý");

        jMenuItem2.setText("QL Bàn Ăn");
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("QL Nhân Viên");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("QL Món Ăn");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Thống kê");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        QuanLyBanAn_Dialog quanLyBanAn_Dialog = new QuanLyBanAn_Dialog(this, true);
        quanLyBanAn_Dialog.setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnDacBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDacBanActionPerformed
        // TODO add your handling code here:
        addChiTietDacBan();
    }//GEN-LAST:event_btnDacBanActionPerformed

    private void btnHuyDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyDBActionPerformed
        // TODO add your handling code here:
        this.deleteChiTietDacBan();
    }//GEN-LAST:event_btnHuyDBActionPerformed

    private void txtThongTinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtThongTinMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtThongTinMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        TenBanAnPanelsByLoai();
        AllBanAn();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Lấy mã bàn ăn hiện tại từ trường văn bản
        String maBanAnHienTai = txtTenBanAnDB.getText();

        // Yêu cầu người dùng nhập mã bàn ăn mới
        String maBanAnMoi = JOptionPane.showInputDialog(this, "Nhập mã bàn ăn mới:");

        // Kiểm tra đầu vào
        if (maBanAnMoi != null && !maBanAnMoi.trim().isEmpty()) {
            // Gọi phương thức chuyenBan để thực hiện chuyển bàn
            boolean success = chuyenBan(maBanAnHienTai, maBanAnMoi);

            // Xử lý kết quả
            if (success) {
                JOptionPane.showMessageDialog(this, "Chuyển bàn thành công!");

                // Cập nhật lại bảng và các trường văn bản sau khi chuyển bàn
                AllBanAn();
                txtTenBanAnDB.setText(""); // Xóa thông tin bàn ăn hiện tại
                txtThongTin.setText(""); // Xóa thông tin chi tiết
            } else {
                JOptionPane.showMessageDialog(this, "Không thể chuyển bàn. Vui lòng thử lại.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bạn phải nhập mã bàn ăn mới.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChiTietBanAn;
    private javax.swing.JButton btnDacBan;
    private javax.swing.JButton btnHuyDB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jpnKhuVuc;
    private javax.swing.JLabel lblMaBanAn;
    private javax.swing.JLabel lblTongTien;
    private javax.swing.JTable tblAllBanAn;
    private javax.swing.JTable tblCTDB;
    private javax.swing.JTable tblThongTinBA;
    private javax.swing.JTextField txtHoTenKHDB;
    private javax.swing.JTextArea txtMoTaBD;
    private javax.swing.JTextField txtNgayDB;
    private javax.swing.JTextField txtSoDienThoaiDB;
    private javax.swing.JTextField txtTenBanAnDB;
    private javax.swing.JTextArea txtThongTin;
    private javax.swing.JTextField txtTienCoc;
    // End of variables declaration//GEN-END:variables

    void init() {
        this.TenBanAnPanelsByLoai();
        this.updateTabs();
        this.AllBanAn();
        this.fillChiTietDacBan();

    }

    private void updateTabs() {
        KhuVucDAO khuVucDAO = new KhuVucDAO();
        List<KhuVuc> khuVucList = khuVucDAO.selectAll();
        for (int i = 0; i < khuVucList.size() && i < jpnKhuVuc.getTabCount() - 1; i++) {
            jpnKhuVuc.setTitleAt(i, khuVucList.get(i).getTenKhuVuc());
        }
        jpnKhuVuc.setTitleAt(jpnKhuVuc.getTabCount() - 1, "Tất cả");
    }

    private void TenBanAnPanelsByLoai() {
        KhuVucDAO khuVucDAO = new KhuVucDAO();
        BanAnDAO banAnDAO = new BanAnDAO();
        ChiTietDacBanDAO chiTietDacBanDAO = new ChiTietDacBanDAO(); // DAO để lấy thông tin chi tiết đặc bàn
        List<KhuVuc> khuVucList = khuVucDAO.selectAll();

        // Clear all tabs except the last one ("Tất cả")
        while (jpnKhuVuc.getTabCount() > 1) {
            jpnKhuVuc.remove(0);
        }

        for (KhuVuc khuVuc : khuVucList) {
            JPanel panelGrid = new JPanel();
            panelGrid.setLayout(new GridLayout(0, 4, 10, 10)); // 4 columns, flexible rows, 10px gap
            panelGrid.removeAll();

            List<BanAn> banAnList = banAnDAO.selectByKhuVuc(khuVuc.getMaKhuVuc());
            for (BanAn banAn : banAnList) {
                JLabel lblTenBanAn = new JLabel(banAn.getTenBan());
                lblTenBanAn.setHorizontalAlignment(JLabel.CENTER);

                JLabel lblTrangThai = new JLabel(banAn.isTrangThai() ? "Có khách" : "Trống");
                lblTrangThai.setHorizontalAlignment(JLabel.CENTER);
                lblTrangThai.setForeground(Color.WHITE);

                JPanel pnlBanAnItem = new JPanel();
                pnlBanAnItem.setLayout(new BorderLayout());
                pnlBanAnItem.add(lblTenBanAn, BorderLayout.CENTER);
                pnlBanAnItem.add(lblTrangThai, BorderLayout.SOUTH);

                // Set panel color based on status
                if (banAn.isTrangThai()) {
                    pnlBanAnItem.setBackground(Color.RED); // Occupied
                } else {
                    pnlBanAnItem.setBackground(Color.GREEN); // Empty
                }

                pnlBanAnItem.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
                pnlBanAnItem.setPreferredSize(new Dimension(150, 150)); // Set the size of the panel

                pnlBanAnItem.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        // Lấy thông tin bàn ăn từ pnlBanAnItem
                        String tenBanAn = lblTenBanAn.getText();
                        txtTenBanAnDB.setText(tenBanAn); // Điền tên bàn ăn vào trường văn bản

                        // Lấy mã bàn ăn từ đối tượng banAn
                        String maBanAn = banAn.getMaBanAn();
                        updateTblThongTinBA(maBanAn);

                        // Cập nhật thông tin chi tiết vào JTextArea
                        ChiTietDacBan chiTiet = chiTietDacBanDAO.selectByMaBanAn(maBanAn); // Lấy thông tin chi tiết đặt bàn từ DAO
                        String thongTin = "";
                        if (chiTiet != null) {
                            // Lấy thông tin khách hàng
                            KhachHangDAO khachHangDAO = new KhachHangDAO();
                            KhachHang khachHang = khachHangDAO.selectById(chiTiet.getMaKH());
                            String tenKhachHang = khachHang != null ? khachHang.getHoTenKH() : "Không có tên khách hàng";

                            // Điền thông tin vào các trường văn bản
                            txtHoTenKHDB.setText(tenKhachHang);
                            txtSoDienThoaiDB.setText(khachHang != null ? khachHang.getSdtKH() : "Không có số điện thoại");
                            txtTienCoc.setText(String.valueOf(chiTiet.getTienCoc()));
                            txtNgayDB.setText(chiTiet.getNgayDatBan());
                            txtMoTaBD.setText(chiTiet.getMoTa());

                            // Cập nhật thông tin chi tiết
                            thongTin = "Tên bàn: " + tenBanAn + "\n"
                                    + "Trạng thái: " + (banAn.isTrangThai() ? "Có khách" : "Trống") + "\n"
                                    + "Tiền cọc: " + chiTiet.getTienCoc() + "\n"
                                    + "Ngày đặt bàn: " + chiTiet.getNgayDatBan() + "\n"
                                    + "Mã khách hàng: " + chiTiet.getMaKH() + "\n"
                                    + "Tên khách hàng: " + tenKhachHang + "\n";
                            // Thêm các thông tin khác nếu cần
                        } else {
                            txtHoTenKHDB.setText("");
                            txtSoDienThoaiDB.setText("");
                            txtTienCoc.setText("");
                            txtNgayDB.setText("");
                            txtMoTaBD.setText("");
                            thongTin = "Thông tin đặt bàn không có.";
                        }
                        txtThongTin.setText(thongTin);

                        // Disable btnDacBan if the table is occupied
                        btnDacBan.setEnabled(!banAn.isTrangThai()); // Disable the button if the table is occupied
                    }
                });

                panelGrid.add(pnlBanAnItem);
            }

            JScrollPane scrollPane = new JScrollPane(panelGrid);
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            panelGrid.setPreferredSize(new Dimension(400, 500));

            jpnKhuVuc.insertTab(khuVuc.getTenKhuVuc(), null, scrollPane, null, jpnKhuVuc.getTabCount() - 1);
        }

        jpnKhuVuc.setTitleAt(jpnKhuVuc.getTabCount() - 1, "Tất cả");
        jpnKhuVuc.revalidate();
        jpnKhuVuc.repaint();
    }

    private void updateTblThongTinBA(String maBanAn) {
        HoaDonDAO hoaDonDAO = new HoaDonDAO();
        ChiTietHoaDonDAO chiTietHoaDonDAO = new ChiTietHoaDonDAO();

        // Fetch the bill based on MaBanAn
        HoaDon hoaDon = hoaDonDAO.selectByMaBanAns(maBanAn);

        // Check if hoaDon is not null
        if (hoaDon == null) {
            // Handle case where no bill is found for the given MaBanAn
            DefaultTableModel model = (DefaultTableModel) tblThongTinBA.getModel();
            model.setRowCount(0); // Clear existing rows
            model.setColumnIdentifiers(new Object[]{"Thông tin"});
            model.addRow(new Object[]{"Mã bàn ăn: " + maBanAn});
            model.addRow(new Object[]{"Tổng tiền: Không có thông tin"});
            return;
        }

        // Fetch the details of the bill
        List<ChiTietHoaDon> chiTietList = chiTietHoaDonDAO.selectByMaHoaDon(hoaDon.getMaHoaDon());

        // Calculate the total amount
        double totalAmount = 0; // Initialize totalAmount correctly
        for (ChiTietHoaDon chiTiet : chiTietList) {
            totalAmount += chiTiet.getGiaTien() * chiTiet.getSoLuong(); // Sum the total amount
        }

        // Update the table with detailed information
        DefaultTableModel model = (DefaultTableModel) tblThongTinBA.getModel();
        model.setRowCount(0); // Clear existing rows

        // Set column identifiers once
        model.setColumnIdentifiers(new Object[]{"Tên món ăn", "Số lượng", "Đơn giá", "Tổng giá"});

        // Add detail rows
        for (ChiTietHoaDon chiTiet : chiTietList) {
            model.addRow(new Object[]{
                chiTiet.getTenMonAn(),
                chiTiet.getSoLuong(),
                chiTiet.getGiaTien(),
                chiTiet.getGiaTien() * chiTiet.getSoLuong() // Calculate and display the total price for each item
            });
        }

        // Add the title row with MaBanAn
        model.addRow(new Object[]{
            "Mã bàn ăn: " + maBanAn,
            "",
            "",
            "Tổng tiền: " + totalAmount
        });

        lblMaBanAn.setText("Mã Bàn: " + maBanAn);
        lblTongTien.setText("Tổng tiền: " + totalAmount);
    }

    public void AllBanAn() {
        BanAnDAO banAnDAO = new BanAnDAO();
        List<BanAn> banAnList = banAnDAO.selectAll();

        // Define column names
        String[] columnNames = {"Mã Bàn Ăn", "Tên Bàn", "Trạng Thái", "Mã Khu Vực", "Bàn Ăn Gốc"};

        // Create a table model and set it to the table
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        tblAllBanAn.setModel(tableModel);

        // Add data to the table
        for (BanAn banAn : banAnList) {
            Object[] rowData = {
                banAn.getMaBanAn(),
                banAn.getTenBan(),
                banAn.isTrangThai() ? "Có khách" : "Trống",
                banAn.getMaKhuVuc(), //            banAn.isBanAnGoc() ? "Có" : "Không"
            };
            tableModel.addRow(rowData);
        }

        // Add mouse listener for table row selection
        // Add mouse listener for table row selection
        tblAllBanAn.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblAllBanAn.rowAtPoint(e.getPoint());
                if (row >= 0) {
                    // Lấy mã bàn ăn từ cột đầu tiên của hàng đã chọn
                    String maBanAnInt = (String) tblAllBanAn.getValueAt(row, 0);

                    // Cập nhật tên bàn ăn vào trường văn bản
                    String tenBanAn = (String) tblAllBanAn.getValueAt(row, 1);
                    txtTenBanAnDB.setText(tenBanAn);

                    // Cập nhật thông tin chi tiết đặt bàn từ DAO
                    ChiTietDacBanDAO chiTietDacBanDAO = new ChiTietDacBanDAO();
                    ChiTietDacBan chiTiet = chiTietDacBanDAO.selectByMaBanAn(maBanAnInt);
                    String thongTin = "";

                    if (chiTiet != null) {
                        // Lấy thông tin khách hàng từ DAO
                        KhachHangDAO khachHangDAO = new KhachHangDAO();
                        KhachHang khachHang = khachHangDAO.selectById(chiTiet.getMaKH());
                        String tenKhachHang = khachHang != null ? khachHang.getHoTenKH() : "Không có tên khách hàng";
                        String soDienThoai = khachHang != null ? khachHang.getSdtKH() : "Không có số điện thoại";

                        // Cập nhật các trường văn bản với thông tin chi tiết
                        txtHoTenKHDB.setText(tenKhachHang);
                        txtSoDienThoaiDB.setText(soDienThoai);
                        txtTienCoc.setText(String.valueOf(chiTiet.getTienCoc()));
                        txtNgayDB.setText(chiTiet.getNgayDatBan());
                        txtMoTaBD.setText(chiTiet.getMoTa());

                        // Cập nhật thông tin chi tiết vào JTextArea
                        thongTin = "Tên bàn: " + tenBanAn + "\n"
                                + "Trạng thái: " + (String) tblAllBanAn.getValueAt(row, 2) + "\n"
                                + "Tiền cọc: " + chiTiet.getTienCoc() + "\n"
                                + "Ngày đặt bàn: " + chiTiet.getNgayDatBan() + "\n"
                                + "Mã khách hàng: " + chiTiet.getMaKH() + "\n"
                                + "Tên khách hàng: " + tenKhachHang + "\n";
                    } else {
                        // Xóa thông tin nếu không có chi tiết đặt bàn
                        txtHoTenKHDB.setText("");
                        txtSoDienThoaiDB.setText("");
                        txtTienCoc.setText("");
                        txtNgayDB.setText("");
                        txtMoTaBD.setText("");
                        thongTin = "Thông tin đặt bàn không có.";
                    }

                    // Cập nhật thông tin chi tiết vào JTextArea
                    txtThongTin.setText(thongTin);

                    // Disable btnDacBan nếu bàn ăn đang có khách
                    BanAnDAO banAnDAO = new BanAnDAO();
                    BanAn banAn = banAnDAO.selectById(maBanAnInt);
                    if (banAn != null) {
                        btnDacBan.setEnabled(!banAn.isTrangThai());
                    } else {
                        btnDacBan.setEnabled(true); // Enable the button if BanAn is not found
                    }
                }
            }
        });

    }

    private void addChiTietDacBan() {
        // Kiểm tra và lấy dữ liệu từ form
        String hoTenKH = txtHoTenKHDB.getText().trim();
        String soDienThoaiKH = txtSoDienThoaiDB.getText().trim();
        String tienCocText = txtTienCoc.getText().trim();
        String ngayDatBan = txtNgayDB.getText().trim();
        String moTa = txtMoTaBD.getText().trim();
        String tenBan = txtTenBanAnDB.getText().trim();

        // Kiểm tra xem có đầy đủ thông tin không
        if (hoTenKH.isEmpty() || soDienThoaiKH.isEmpty() || tienCocText.isEmpty()
                || ngayDatBan.isEmpty() || moTa.isEmpty() || tenBan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.");
            return;
        }

        // Chuyển đổi tiền cọc từ chuỗi thành số
        double tienCoc;
        try {
            tienCoc = Double.parseDouble(tienCocText);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Tiền cọc không hợp lệ.");
            return;
        }

        // Tạo và chèn đối tượng KhachHang
        KhachHang khachHang = new KhachHang();
        khachHang.setHoTenKH(hoTenKH);
        khachHang.setSdtKH(soDienThoaiKH);

        KhachHangDAO khachHangDAO = new KhachHangDAO();
        khachHangDAO.insert(khachHang);

        // Lấy mã khách hàng từ tên khách hàng
        String maKH = khachHangDAO.getMaKHByHoTen(hoTenKH);
        if (maKH == null) {
            JOptionPane.showMessageDialog(this, "Không thể lấy mã khách hàng.");
            return;
        }

        // Lấy thông tin bàn ăn từ danh sách
        BanAnDAO banAnDAO = new BanAnDAO();
        List<BanAn> list = banAnDAO.selectAll(); // Lấy danh sách tất cả bàn ăn
        BanAn banAn = null;
        for (BanAn item : list) {
            if (item.getTenBan().equals(tenBan)) {
                banAn = item;
                break;
            }
        }

        if (banAn == null) {
            JOptionPane.showMessageDialog(this, "Bàn ăn không hợp lệ.");
            return;
        }

        String maBanAn = banAn.getMaBanAn(); // Lấy mã bàn ăn

        // Tạo và chèn đối tượng ChiTietDacBan
        ChiTietDacBan chiTietDacBan = new ChiTietDacBan();
        chiTietDacBan.setTienCoc(tienCoc);
        chiTietDacBan.setNgayDatBan(ngayDatBan);
        chiTietDacBan.setMaKH(maKH);
        chiTietDacBan.setMaBanAn(maBanAn);
        chiTietDacBan.setMoTa(moTa);

        ChiTietDacBanDAO chiTietDacBanDAO = new ChiTietDacBanDAO();
        chiTietDacBanDAO.insert(chiTietDacBan);

        // Cập nhật trạng thái bàn ăn thành "Có khách"
        banAn.setTrangThai(true); // Đặt trạng thái bàn ăn thành "Có khách"
        banAnDAO.update(banAn); // Cập nhật trạng thái bàn ăn trong cơ sở dữ liệu

        // Làm sạch các trường nhập liệu
        txtHoTenKHDB.setText("");
        txtSoDienThoaiDB.setText("");
        txtTienCoc.setText("");
        txtNgayDB.setText("");
        txtMoTaBD.setText("");
        txtTenBanAnDB.setText("");

        // Thông báo thành công
        JOptionPane.showMessageDialog(this, "Thông tin đã được thêm thành công và bàn ăn đã được cập nhật.");
    }

    private void fillChiTietDacBan() {
        // Tạo tiêu đề cột cho bảng
        String[] columnNames = {"Mã khách hàng", "Tên khách hàng", "SĐT", "Tiền cọc", "Ngày đặt bàn", "Tên bàn ăn"};

        // Lấy dữ liệu từ cơ sở dữ liệu
        ChiTietDacBanDAO chiTietDacBanDAO = new ChiTietDacBanDAO();
        List<ChiTietDacBan> list = chiTietDacBanDAO.selectAll();

        // Chuẩn bị dữ liệu cho bảng
        Object[][] data = new Object[list.size()][columnNames.length];

        // DAO để lấy thông tin chi tiết
        KhachHangDAO khachHangDAO = new KhachHangDAO();
        BanAnDAO banAnDAO = new BanAnDAO();

        for (int i = 0; i < list.size(); i++) {
            ChiTietDacBan item = list.get(i);

            // Lấy thông tin khách hàng từ mã khách hàng
            String maKH = item.getMaKH();
            KhachHang khachHang = (maKH != null && !maKH.isEmpty()) ? khachHangDAO.selectById(maKH) : null;
            String tenKhachHang = khachHang != null ? khachHang.getHoTenKH() : "Chưa có thông tin";
            String sdtKhachHang = khachHang != null ? khachHang.getSdtKH() : "Chưa có thông tin";

            // Lấy thông tin bàn ăn từ mã bàn ăn
            String maBanAn = item.getMaBanAn();
            BanAn banAn = (maBanAn != null && !maBanAn.isEmpty()) ? banAnDAO.selectById(maBanAn) : null;
            String tenBanAn = banAn != null ? banAn.getTenBan() : "Chưa có thông tin";

            // Điền dữ liệu vào mảng
            data[i][0] = maKH != null ? maKH : "Chưa có thông tin";       // Mã khách hàng
            data[i][1] = tenKhachHang;                                      // Tên khách hàng
            data[i][2] = sdtKhachHang;                                      // SĐT
            data[i][3] = item.getTienCoc();                                 // Tiền cọc
            data[i][4] = item.getNgayDatBan();                              // Ngày đặt bàn
            data[i][5] = tenBanAn;                                         // Tên bàn ăn
        }

        // Cập nhật mô hình dữ liệu cho bảng
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        tblCTDB.setModel(model);
    }

    private void deleteChiTietDacBan() {
        // Lấy thông tin từ giao diện người dùng
        String tenBan = txtTenBanAnDB.getText().trim(); // Tên bàn ăn

        // Kiểm tra đầu vào
        if (tenBan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin.");
            return;
        }

        // Xác nhận xóa thông tin
        int confirm = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc chắn muốn xóa thông tin đặt bàn cho bàn ăn '" + tenBan + "'?",
                "Xác Nhận Xóa",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.NO_OPTION) {
            return; // Nếu người dùng chọn không, không thực hiện hành động xóa
        }

        // Lấy thông tin bàn ăn từ danh sách
        BanAnDAO banAnDAO = new BanAnDAO();
        List<BanAn> list = banAnDAO.selectAll(); // Lấy danh sách tất cả bàn ăn
        BanAn banAn = null;
        for (BanAn item : list) {
            if (item.getTenBan().equals(tenBan)) {
                banAn = item;
                break;
            }
        }

        if (banAn == null) {
            JOptionPane.showMessageDialog(this, "Bàn ăn không hợp lệ.");
            return;
        }

        String maBanAn = banAn.getMaBanAn(); // Lấy mã bàn ăn

        // Xóa thông tin đặt bàn từ cơ sở dữ liệu
        ChiTietDacBanDAO chiTietDacBanDAO = new ChiTietDacBanDAO();
        ChiTietDacBan chiTiet = chiTietDacBanDAO.selectByMaBanAn(maBanAn);

        if (chiTiet != null) {
            chiTietDacBanDAO.deleteByMaBanAn(maBanAn); // Xóa thông tin đặt bàn dựa trên mã bàn ăn

            // Cập nhật trạng thái của bàn ăn thành "Trống"
            banAn.setTrangThai(false); // Đặt trạng thái bàn ăn về "Trống"
            banAnDAO.update(banAn); // Cập nhật trạng thái bàn ăn trong cơ sở dữ liệu

            // Làm sạch các trường nhập liệu
            txtHoTenKHDB.setText("");
            txtSoDienThoaiDB.setText("");
            txtTienCoc.setText("");
            txtNgayDB.setText("");
            txtMoTaBD.setText("");
            txtTenBanAnDB.setText("");

            // Cập nhật bảng thông tin đặt bàn
            fillChiTietDacBan(); // Cập nhật lại bảng để phản ánh sự thay đổi

            // Thông báo thành công
            JOptionPane.showMessageDialog(this, "Thông tin đặt bàn đã được xóa và bàn ăn đã trở về trạng thái trống.");
        } else {
            JOptionPane.showMessageDialog(this, "Thông tin đặt bàn không tồn tại.");
        }
    }

    public boolean chuyenBan(String maBanAnHienTai, String maBanAnMoi) {
        BanAnDAO banAnDAO = new BanAnDAO();
        boolean success = false;

        try {
            // Lấy thông tin bàn ăn hiện tại
            BanAn banAnHienTai = banAnDAO.selectById(maBanAnHienTai);
            if (banAnHienTai == null) {
                throw new IllegalArgumentException("Bàn ăn hiện tại không tồn tại.");
            }

            // Lấy thông tin bàn ăn mới
            BanAn banAnMoi = banAnDAO.selectById(maBanAnMoi);
            if (banAnMoi == null) {
                throw new IllegalArgumentException("Bàn ăn mới không tồn tại.");
            }

            // Kiểm tra trạng thái của bàn ăn mới
            if (banAnMoi.isTrangThai()) {
                throw new IllegalStateException("Bàn ăn mới đã có khách.");
            }

            // Cập nhật trạng thái bàn ăn hiện tại (set trống)
            banAnHienTai.setTrangThai(false);
            banAnDAO.update(banAnHienTai);

            // Cập nhật trạng thái bàn ăn mới (set có khách)
            banAnMoi.setTrangThai(true);
            banAnDAO.update(banAnMoi);

            success = true;
        } catch (IllegalArgumentException | IllegalStateException e) {
            // Xử lý ngoại lệ liên quan đến đối tượng không tồn tại hoặc trạng thái không hợp lệ
            e.printStackTrace();
        } catch (Exception e) {
            // Xử lý các ngoại lệ khác
            e.printStackTrace();
        }

        return success;
    }

}
